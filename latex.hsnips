global
// JavaScript code
// const testDir = require('os').homedir()+'\\OneDrive\\VSCode\\hsnips\\global.js';
// 生成矩阵(行，列，开始的占位符 )
function getFunc(){
    const globalDir = import('os').homedir()+'\\OneDrive\\VSCode\\hsnips\\global.js';
    const func = require(globalDir);
    return func;
}
function gen_matrix(nrow, ncol, start_Placeholder=0) {
	let results = "";
	let order = 1+start_Placeholder;
    //行循环
	for (var i=0; i < nrow; i++){
        //在每行的开头加上一个制表符
		results += '\t';
        //列循环
		for(var j = 0; j < ncol - 1; j++){
            //为在前n-1个行元素加上对齐“&”和占位符$order
			results += "$" + (order).toString() + " & ";
			order ++;
		}
        // 在行末尾加上最后一个占位符之后添加\\和换行
		results += "$" + (order).toString() + " \\\\" + "\\\n";
		order ++;
	}
	return results;
}


//检查input中的left和right是否配对。配对返回0；不配对则返回第一个不配对的left或right的位置，并且通过input[i]来使用该位置。
function checkBraces(input, left, right) {
    let stack = [];
    let leftLength = left.length;
    let rightLength = right.length;
    //将所有的left和right的位置push入栈
    for (let i = 0; i <= input.length - 1; i++) {
        //将left 的位置入栈
        if (input.substr(i, leftLength) === left) {
            stack.push(i); 
            i += leftLength - 1; //检查下一个位置
        }
        //如果有配对的right，则将配对的left出栈；如果出现了没配对的right，则返回其位置
        else if (input.substr(i, rightLength) === right) {
            if (stack.length === 0) {
                //如果之后的left和right都完成配对，则此时出现的right为不配对的right，返回其位置
                return i ; 
            } else {
                stack.pop(); //如果前面有没配对的left，则找到一个配对的right，将前一个left的位置出栈。
            }
            i += rightLength - 1; //检查下一个位置
        }
    }
    if (stack.length > 0) {
        return stack[0]; // 在检查完字符串后，如果仍有没配对的left，则返回其位置
    }
    return 0; //所有的left和right配对则返回0
}


//将字符串按照symbol划分成两部分，给出所有划分的数组。
function splitStringBySymbol(input, symbol) {
    let parts = input.split(symbol);
    let result = [];
    //当input不含symbol时，返回{firstPart: 空字符串，secondPart: input}
    if (parts.length === 1) {
        return [{ firstPart: "", secondPart: input }];
    }
    //当input含有symbol时，返回所有被分割后的两个字符串的组合
    for (let i = 1; i < parts.length; i++) {
        let firstPart = parts.slice(0, i).join(symbol) ;
        if (symbol == "\|") { firstPart += symbol }
        let secondPart = parts.slice(i).join(symbol);
        result.push({ firstPart: firstPart, secondPart: secondPart });
    }
    return result;
}


//计算一个字符串的开头有几个缩进，向下取整
function tabCounter(str) {
    let tabCount = 0;
    let spaceCount = 0;
    const spacePerTab = 4;

    for (let char of str) {
        if (char === '\t') {
            tabCount += 1;
        } else if (char === ' ') {
            spaceCount += 1;
            if (spaceCount === spacePerTab) {
                tabCount += 1;
                spaceCount = 0;
            }
        } else { break; }
    }
    return tabCount;
}

// 移除字符串开头的空格、制表符
function removeSpace(str){
    return str.replace(/^[\t\x20]+/g,"")
}

// 将m[i]连接成一个字符串
function join(m = [""],begin=0,end = m.length){
    let result = ""
    for (let i = begin ; i<=end ;i++){
        result += m[i] ? m[i].replace(/^\n/g,"").replace("\\\\","\\\\\\").replace(/^[\t\x20]+/g,"") : ""
    }
    return result
}

// 将m[i]中的字符转义: 由于hsnips返回的结果(rv)会被vscode转义，所以要把在m[i]中得到的字符串手动转义，此时由rv返回的字符串才是原字符串。
function rawStr(str){
    let result = str
    result = result.replace(/\\\\/g,"\\\\\\")
    result = result.replace(/}/g,"\\}")
    return result
}

// 给出input的braket结果。此函数需要在ket和braket两个snippet中使用
function replaceBra(input) {
    let lastBraIndex = input.lastIndexOf("\\bra{");
    let maxrun = 10;
    while (lastBraIndex !== -1 && maxrun>0) {
        // 找到与\bra{配对的}
        let closingBraceIndex = checkBraces(input.substring(lastBraIndex+5),"\{","\}")+lastBraIndex+5
        if (closingBraceIndex === -1) {
            return input+"\>"; // 如果没有配对的}，返回原值
        }
        // 将最后一个(beforeBra)\bra{braContent}(afterBra)拆分
        let beforeBra = input.substring(0, lastBraIndex);
        let braContent = input.substring(lastBraIndex + 5, closingBraceIndex); 
        let afterBra = input.substring(closingBraceIndex + 1);
        // 检查要替换的部分(braContent和afterBra)里的括号是否配对
        let checkBracesResult1 = checkBraces(braContent, "\{", "\}") + checkBraces(braContent, "\\left","\\right");
        let checkBracesResult2 = checkBraces(afterBra, "\\left", "\\right") + checkBraces(afterBra, "\{","\}");
        if (checkBracesResult1 === 0 && checkBracesResult2 === 0) {
            // 将\bra{...}...扩展成\braket{...|...}
            return beforeBra + "\\braket{" + braContent + "|" + afterBra + "}";
        }
        // 移动到前一个\bra{
        lastBraIndex = input.lastIndexOf("\\bra{", lastBraIndex - 1);
        maxrun--;
    }
    return input+"\>";
}
endglobal

//####################################
//############### 测试 ###############
//####################################
snippet test1 "test1" iA
``
const globalDir = require('os').homedir()+'\\OneDrive\\VSCode\\hsnips\\global.js';
const func = require(globalDir);
rv = func.rawStr("hello!\}\n");
``
endsnippet

snippet test2 "test2" iA
``
rv = getFunc().rawStr("hello!\}\n");
``
endsnippet

//####################################
//############ LaTeX 模板 ############
//####################################

snippet `use(notebook|math|color|hyperref|homework)` "latex templates" wA
``
const fs = require('fs');
const userHomeDir = require('os').homedir();
const relativePath = '\\OneDrive\\VSCode\\latex-templates\\';
try {
    // 同步读取文件内容
    let path = userHomeDir+relativePath+m[1]+".latex";
    let data = fs.readFileSync(path);
    // 分割成行
    const lines = data.toString().split('\n');
    // 处理每一行
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('###')) {
            fileNameToLoad = "\\" + lines[i].substring(3, lines[i].length - 1);
            try{
                let data1 = fs.readFileSync(userHomeDir+relativePath+fileNameToLoad);
                rv += "\n"+data1+"\n";
            }catch(err1){
                rv += lines[i];
            }
        }else{
            rv += lines[i];
        }
    }
} catch (err) {
    console.error('Error reading file:', err);
}
``
endsnippet

//####################################
//############简单数学符号############
//####################################

snippet `(?<!\\)(\~\=)|(\~\~)|(\+\-)|(\-\+)|(\-\>)|(\-\-\>)|(oo)|(\boc)|(\=\>)|(\=\=)|(!=)|(\<\=)|(\>\=)|(xx)|(?<!\\)(dag)|(?<![oa])(pt)|(\^\^)|(const)|(?<!\\)(star)|(sr)|(?<!inclu)(deg)|(?<!\\)(?<!a)(dd)|(<<)|(>>)|(EE)|(\{\\\,\\leqslant\\\,\} >)|(\/\u0060)|(\\star)|(\|\_)` "简单数学符号" iAm
``
var mathSymbol=[
    "\{\\,\\simeq\\,\} ",
    "\{\\,\\approx\\,\} ",
    "\{\\,\\pm\\,\} ",
    "\{\\,\\mp\\,\} ",
    "\{\\rightarrow\} ",
    "\{\\longrightarrow\} ",
    "\{\\infty\} ",
    "\{\\,\\propto\\,\} ",
    "\{\\,\\implies\\,\} ",
    "\{\\,\\equiv\\,\} ",
    "\{\\,\\neq\\,\} ",
    "\{\\,\\leqslant\\,\} ",
    "\{\\,\\geqslant\\,\} ",
    "\{\\times\} ",
    "\^\{\\dagger\}",
    "\{\\partial\} ",
    "\{\\wedge\} ",
    "\\text\{Const\.\} ",
    "\^\*",
    "\^2",
    "\^\{\\circ\}",
    "\\\,\\mathbb\{d\}",
    "\{\\,\\ll\\,\} ",
    "\{\\,\\gg\\,\} ",
    "\{\\,\\in\\,\} ",
    "\{\\,\\Leftrightarrow\\,\} ",
    "\{\\,\\sim\\,\} ",
    "\\text\{\\usefont\{OMS\}\{cmsy\}\{m\}\{n\}\$\\star\$\} ",
    "\{\\perp\} "
]
for (let i = 1; i <= mathSymbol.length; i++) {
    if (m[i]){
        rv=mathSymbol[i-1]
    }
}
``
endsnippet

snippet `(?<!\\)(sin|arcsin|cos|arccos|tan|arctan|cot|arccot|csc|arccsc|exp|ln|hbar|det)` "数学函数" iAm
{\\`` rv=m[1] ``}
endsnippet

snippet `\{\\(sin|arcsin|cos|arccos|tan|arctan|cot|arccot|csc|arccsc)\}h` "双曲三角函数" iAm
{\\``rv=m[1] ``h}
endsnippet

//####################################
//############填充数学符号############
//####################################

snippet // "Fraction" iAm
\frac{ ${1:${VISUAL}} }{ $2 } $0
endsnippet

snippet \/ "big /" iAm
{\bigg/}
endsnippet

snippet vec "向量" im
\symbfit{$1}$0
endsnippet

snippet `([a-zA-Z0-9\{\}\_\^\\\(\)\*\']+)vec` "自动向量" iAm
\symbfit{`` rv=m[1] ``}$0
endsnippet

snippet til "tilde" im
\tilde{$1}$0
endsnippet

snippet `([a-zA-Z0-9\{\}\_\^\\\(\)\*\']+)mbb` "自动黑板粗体" iAm
\mathbb{`` rv=m[1] ``}$0
endsnippet

snippet `\{?([a-zA-Z]|\\alpha|\\Alpha|\\beta|\\Beta|\\chi|\\Chi|\\delta|\\Delta|\\varepsilon|\\Varepsilon|\\varphi|\\Phi|\\gamma|\\Gamma|\\eta|\\Eta|\\iota|\\Iota|\\kappa|\\Kappa|\\lambda|\\Lambda|\\mu|\\Mu|\\nu|\\Nu|\\omicron|\\Omicron|\\pi|\\Pi|\\theta|\\Theta|\\rho|\\Rho|\\sigma|\\Sigma|\\tau|\\Tau|\\upsilon|\\Upsilon|\\varsigma|\\Varsigma|\\omega|\\Omega|\\xi|\\Xi|\\psi|\\Psi|\\zeta|\\Zeta)\}?([\_\^]\{?[0-9a-zA-Z]+\}?)?(\.\/2d|\.\/1d|bar|hat|til)` "bar" iAm
\\``
let arr = [
    "\.\/2d",
    "\.\/1d",
    "bar",
    "hat",
    "til"
]
let out_arr = [
    "ddot",
    "dot",
    "overline",
    "hat",
    "tilde"
]
for (let i = 0; i < arr.length; i++) {
    if (m[3] == arr[i]) {
        rv = out_arr[i] 
    } 
}
``{``
rv=m[1]
if (m[2]) {
    rv+=m[2] 
}
``}$0
endsnippet

snippet || "Bigg|" iAm
\bigg|_{$1}^{$2}
endsnippet

snippet `(?<!\\)(sum|prod|int|oint|iint|oiint|iiint)` "A_{$1}^{$2}" iAm
\\``rv=m[1]``_{$1}^{$2} $0
endsnippet

snippet `(?<!\\)lim` "limit" iAm
\lim_{ ${1:n} \to ${2:\infty}} 
endsnippet

snippet `(max|min)` "max / min" iAm
\mathop{\``rv=m[1]``}\limits_{ $1 }$0
endsnippet

snippet `(?<!\\text\{)(span)|(SPAN)` "span" iAm
\text{Span}\left\\{ $1 \right\\} $0
endsnippet

snippet `(over|under)set` "overset & underset" iAm
\\``rv=m[1]``set{ $1 }{ $2 } $0
endsnippet

snippet `(sbk)|(mbk)|(bbk)|(abs)|(?<!big[g]?)(norm)` "\left... $1 \right... $0" iAm
\left``
let arr1 = [
    "\(",
    "\[",
    "\\\{",
    "\|",
    "\\\|"
] 
for (let i = 0; i < arr1.length; i++) {
    if (m[i+1]) {
        rv=arr1[i]
    }
}
`` ${1:${VISUAL}} \right``
let arr2 = [
    "\)",
    "\]",
    "\\\\}",
    "\|",
    "\\\|"
] 
for (let i = 0; i < arr2.length; i++) {
    if (m[i+1]) {
        rv=arr2[i]
    }
}
`` $0
endsnippet

snippet `(?<!\\)(big\])|(?<!\\)(big\))|(big\})|(?<!\\)(bigg\])|(?<!\\)(bigg\))|(?<!\\)(bigg\})|(?<!\\)(big\|)|(?<!\\)(bigg\|)|(?<!\\)(bignorm)|(?<!\\)(biggnorm)` "\big... $1 \big... $0" iAm
\big``
let arr1 = [
    "\[",
    "\(",
    "\\{",
    "g\[",
    "g\(",
    "g\\{",
    "\|",
    "g\|",
    "\\\|",
    "g\\\|"
] 
for (let i = 0; i < arr1.length; i++) {
    if (m[i+1]) {
        rv=arr1[i]
    }
}
`` ${1:${VISUAL}} \big``
let arr2 = [
    "\]",
    "\)",
    "\\\\}",
    "g\]",
    "g\)",
    "g\\\\}",
    "\|",
    "g\|",
    "\\\|",
    "\\\|"
] 
for (let i = 0; i < arr2.length; i++) {
    if (m[i+1]) {
        rv=arr2[i]
    }
}
`` $0
endsnippet

snippet `([a-zA-Z0-9\{\}\_\^\\\(\)\*\']+)/` "自动分式" iAm
\frac{ `` rv=m[1] `` }{ $1 } $0
endsnippet

snippet \,\mathbb{d}d "微分算子" iAm
\frac{\,\mathbb{d} $1}{\,\mathbb{d} ${2:t}} $0
endsnippet

snippet pp "偏微分算子" im
\frac{\partial $1}{\partial ${2:t}} $0
endsnippet

snippet ss "Super Script" iAm
^{$1}$0
endsnippet

snippet sd "subscript" iAm
_{$1}$0
endsnippet

snippet sf "superscript and subscript" iAm
_{ $1 }^{ $2 } $0
endsnippet

snippet tt "text" iAm
\text{$1}$0
endsnippet

snippet opn "operator name" iAm
\operatorname{$1}$0
endsnippet

snippet `(TXT)|(\wtxt)` "text color" iA
{\fontsize{${1:11}}{${2:16}}\color{${3:red}}{${4:txt}}}$0
endsnippet

snippet `BF` "text bf" iA
\textbf{ $1 } $0
endsnippet

snippet `(\S+)spaced` "spaced text" wA
``
for (let char of m[1]){
    rv += (char == m[1][m[1].length-1]) ? char : char + "\\hspace\{\$\{1\:0.25\}em\}"
}
``
endsnippet

snippet sqr "Square Root" iAm
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet nsq "... Root" im
\sqrt[$1]{${2:${VISUAL}}}$0
endsnippet

snippet `(p|v|b)mat(\d+)\,(\d+)` "matrix" iAm
\\begin{``rv=m[1]``matrix}
``
	rv = gen_matrix(m[2],m[3],0);
``\\end{``rv=m[1]``matrix}$0
endsnippet

snippet `matrix\}\n(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?[\s]+addcol` "matrix add col" iAMm
``
function addcol(str,placeholder) {
    let col = splitStringBySymbol(str,"\\\\")[0].firstPart.replace( /^\s+/g, '')
    col += "& \$"+placeholder + " \\"+"\\"+"\\"
    return col
}
rv = "matrix\}\n"
for (let i = 1; i <= 10; i++) {
    if (m[i]) {
        rv += "\t".repeat(1)+addcol(m[i],i)
        if (m[i+1]) {rv += "\n"}
    }
}
``
endsnippet

snippet `matrix\}\n(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?[\s]+addrow` "matrix add row" iAMm
``
function showMatchGroup(str) {
    let mg = splitStringBySymbol(str,"\\\\")[0].firstPart.replace( /^\s+/g, '')
    return mg
}
function placeholderCounter(str) {
    return splitStringBySymbol(str,"&").length
}
rv = "matrix\}\n"
for (let i = 1; i <= 10; i++) {
    if (m[i]) {
        rv += "\t"+showMatchGroup(m[i])+"\\\\\\\n"
    }
}
rv += "\t$1"
for (let j = 2; j<=placeholderCounter(m[1])+1; j++){
    rv += " & "+"$"+j
}
rv += " \\\\\\"
``
endsnippet

snippet `matrix\}\n(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?(.+\\\n)?[\s]+reinput` "matrix reinput content" iAMm
``
rv = "matrix\}\n"
let counter = 1
for (let i = 1; i <= 10; i++) {
    if (m[i]) {
        m[i] = rawStr(m[i]).replace("\n","")
        console.log("🚀 ~ file: test.js:28 ~ m:", m[i])
        rv += "\t"
        let splited = m[i].replace("\\\\\\","").replace( /^\s+/g, '').split("&")
        if (splited.length == 1) {
            rv += " \$\{"+counter+":"+splited[0]+"\}"
            counter++
        }else{
            for (let j = 0; j < splited.length; j++) {
                rv += " \$\{"+counter+":"+splited[j]+"\} "
                if (j != splited.length-1) {
                    rv +="&"
                }
                counter++
            }
        }
        rv += ( !m[i+1] ? "\\\\\\" : "\\\\\\"+"\n" )
    }else{
        break
    }
}
``
endsnippet

priority 99
snippet `tab(\d+)\,(\d+)` "无边框表格" iA
\begin{array}{*{``rv=m[2]``}{c}}
``
rv=gen_matrix(m[1],m[2]).slice(0,-1) // 去掉最后一个换行符
``
\end{array}
endsnippet

priority 100
snippet `ltab(\d+)\,(\d+)` "三线表" iA
\begin{table}[H]
\centering${1:
\caption{${2:table}\}}
\begin{tabular}{*{``rv=m[2]``}{c}}
\toprule
``rv=gen_matrix(1,m[2],2)``\midrule
``rv=gen_matrix(m[1]-1,m[2],m[2]+2)``\bottomrule
\end{tabular}
\end{table}
endsnippet

snippet `\<(.+)\|` "bra" iAm
\bra{`` rv=m[1] ``}
endsnippet

priority 100
snippet `(?<!\\left)(?<!\\right)(?<!\\bigg)\|(.+)\>` "ket" iAm
``
rv = "\|"+m[1]+"\>"
let splited = splitStringBySymbol(m[1],"\|")
for (let i = splited.length-1; i >=0 ; i--) {
    //检查该步的firstPart[i]是否符合条件:(1)不以\left|结尾(2)不以\right|结尾(3)不以\bigg|结尾；secondPart[i]是否符合条件:(1)所有的大括号配对；(2)所有的\left \right配对。如果配对则将其作为ket的内容并退出循环。
    let p1 = "\|"+splited[i].firstPart
    let p2 = splited[i].secondPart
    if (checkBraces(p2,"\{","\}")==0 && checkBraces(p2,"\\left","\\right")==0 && p1.substring(p1.length-7)!="\\right\|" && p1.substring(p1.length-6)!="\\left\|" && p1.substring(p1.length-6) != "\\bigg\|") {
        rv=p1.substring(0,p1.length-1)+"\\ket\{"+p2+"\}"
        break
    }
}
// ket优先级高于braket，有可能出现 \braket{a|b}... bra{a}b>无法被braket处理的情况。
// 为这种情况的braket处理:
// 如果m[1]含有\bra{...}
if (m[1].includes("\\bra\{")){
    // 给出\bra{...}的位置指标
    let index = m[1].indexOf(/\\bra\{.+\}/g);
    // 将指标前的字符串添加到rv中，指标后的字符串添加到待处理的braket中
    rv = "\|"+m[1].substring(0,index);
    braket = m[1].substring(index);
    // 将braket处理后的内容添加到rv中
    rv += replaceBra(braket)
}
``
endsnippet

priority 99
snippet `(\\bra\{.+)\>` "dirac braket" iAm
``
rv = replaceBra(m[1])
``
endsnippet

snippet <> "braket" iAm
\braket{ $1 }$0
endsnippet


//####################################
//##############希腊字母##############
//####################################

snippet `\.(a)|\.(A)|\.(b)|\.(B)|\.(c)|\.(C)|\.(d)|\.(D)|\.(e)|\.(E)|\.(f)|\.(F)|\.(g)|\.(G)|\.(h)|\.(H)|\.(i)|\.(I)|\.(j)|\.(J)|\.(k)|\.(K)|\.(l)|\.(L)|\.(m)|\.(M)|\.(n)|\.(N)|\.(o)|\.(O)|\.(p)|\.(P)|\.(q)|\.(Q)|\.(r)|\.(R)|\.(s)|\.(S)|\.(t)|\.(T)|\.(u)|\.(U)|\.(v)|\.(V)|\.(w)|\.(W)|\.(x)|\.(X)|\.(y)|\.(Y)|\.(z)|\.(Z)|\.\\(e)|\.\\(E)|\.\\(f)|\.\\(F)` "greek letters" iAm
{\\``
var greekLetters=[ 
    "alpha","Alpha",
    "beta","Beta",
    "chi","Chi",
    "delta","Delta",
    "epsilon","Epsilon",
    "varphi","Phi",
    "gamma","Gamma",
    "eta","Eta",
    "iota","Iota",
    "nabla","square",
    "kappa","Kappa",
    "lambda","Lambda",
    "mu","Mu",
    "nu","Nu",
    "omicron","Omicron",
    "pi","Pi",
    "theta","Theta",
    "rho","Rho",
    "sigma","Sigma",
    "tau","Tau",
    "upsilon","Upsilon",
    "varsigma","Varsigma",
    "omega","Omega",
    "xi","Xi",
    "psi","Psi",
    "zeta","Zeta",
    "varepsilon","Varepsilon",
    "phi","Phi"
]
for (let i = 1; i <= greekLetters.length; i++) {
    if (m[i]){
        rv=greekLetters[i-1]
    }
}
``}
endsnippet

//####################################
//##############物理学常数#############
//####################################

snippet `\.\/(e0)|\.\/(kb)|\.\/(kk)|\.\/(h)` "物理学常数" iAm
{``
var consts=["\\epsilon_0","k_\{B\}","\\frac\{1\}\{4\\pi\\epsilon_0\}","\\hbar"]
for (let i = 1; i <= consts.length; i++) {
    if (m[i]){
        rv=consts[i-1]
    }
}
``}
endsnippet

snippet elk "电动力学k" iAm
\frac{${1:1}}{4\pi\epsilon_0 $2}$0
endsnippet

//####################################
//##############自动下标##############
//####################################

snippet `(})(\d)\2` "auto subscript" iAm
`` rv = m[1] + "_" + m[2]``
endsnippet

snippet `\b([A-Za-z])(\d)` "auto subscript" iAm
`` rv = m[1] + "_" + m[2]``
endsnippet

priority 100
snippet `\b([A-Za-z])_(\d{2})` "auto subscript" iAm
`` rv = m[1] + "_{" + m[2] + "}$0" ``
endsnippet

priority 100
snippet `([A-Za-z])S(\d)` "auto subscript" iAm
`` rv = m[1] + "_{" + m[2] + "$1}$2"``
endsnippet

snippet `\{(\\alpha|\\Alpha|\\beta|\\Beta|\\chi|\\Chi|\\delta|\\Delta|\\varepsilon|\\Varepsilon|\\varphi|\\Phi|\\gamma|\\Gamma|\\eta|\\Eta|\\iota|\\Iota|\\kappa|\\Kappa|\\lambda|\\Lambda|\\mu|\\Mu|\\nu|\\Nu|\\omicron|\\Omicron|\\pi|\\Pi|\\theta|\\Theta|\\rho|\\Rho|\\sigma|\\Sigma|\\tau|\\Tau|\\upsilon|\\Upsilon|\\varsigma|\\Varsigma|\\omega|\\Omega|\\xi|\\Xi|\\psi|\\Psi|\\zeta|\\Zeta|\\epsilon|\\Epsilon|\\phi)\}([0-9])` "auto subscript for greek letter" iAm
`` rv = m[1] + "\_" + m[2].substring(0, 1) ``
endsnippet

//###############################################
//################## LaTeX命令###################
//###############################################

//####################################
//############# LaTeX符号#############
//####################################

snippet `(\.\.)|(\{\\cdot\}\.)|(\{\\cdots\}\.)|(\{\\vdots\}\.)|(?<!\\)(\{\\ddots\}\.)` "dots" iA
``
let arr = ["\{\\cdot\}","\{\\cdots\}","\{\\vdots\}","\{\\ddots\}","\{\\cdots\}"]
for (let i = 1; i <= arr.length; i++) {
    if (m[i]) {
        rv = arr[i-1]
    }
}
``
endsnippet

snippet \\ "another line" iA
\\\\ 

endsnippet

snippet `\b(?<!\\)dit` "description item" iA

\item[$1] $0
endsnippet

snippet `IT` "item" iA

\item 
endsnippet


//####################################
//############# LaTeX环境#############
//####################################

snippet `(fig)|(FIG)` "Figure environment" iA
\begin{figure}[${1:H}]
	\centering
	\includegraphics[width=0.${2:8}\linewidth]{$3}
\end{figure}
$0
endsnippet

snippet wfig "wrap figure" iA
\begin{wrapfigure}{${1:l}}{${2:0.4}\textwidth}
    \includegraphics[width=${3:0.25}\textheight]{$4}
\end{wrapfigure}

endsnippet

snippet `(figcap)|(FIGC)` "Figure environment" iA
\begin{figure}[${1:H}]
	\centering
	\includegraphics[width=0.${2:8}\linewidth]{$3}
	\caption{$4}
	\label{fig:$5}
\end{figure}
endsnippet

snippet `(bege|enum|ENUM)` "Enumerate" iA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet desc "description" iA
\begin{description}
    \item[$1] $2
\end{description}
endsnippet

snippet `(CEQ)|(eqca)` "cases" iA
\begin{equation}
	\begin{cases}
		${1:${VISUAL}}
	\end{cases}
\end{equation}
$0
endsnippet

snippet `(CA)|(?<![\\\{])(case)|(lrcase)|(LRCA)|(rcase)|(RCA)` "begin cases" iA
``
rv += "\\begin\{"
returnGroup = [
    "",
    "cases",
    "cases",
    "lrcases",
    "lrcases",
    "rcases",
    "rcases"
]
for (let i = 1; i < returnGroup.length; i++) {
    if (m[i]) {
        rv += returnGroup[i] + "\}\n\t\$1\n\\end\{" + returnGroup[i] + "\}"
    }
}
``
endsnippet


snippet `DM` "Display Math Style" iA
\displaystyle 
endsnippet

snippet `(?<!\\[f]?)(eq)?(box)` "box | box in equation" iA
\fbox{``rv = m[1] ? "\$ \\displaystyle" : ""`` $2 ``rv = m[1] ? "\$" : ""``} $0
endsnippet

snippet `(begal|align)` "align" iA
\begin{aligned}
	${0:${VISUAL}}
\end{aligned}
endsnippet

snippet `(begsp)` "split" iA
\begin{split}
	${1:${VISUAL}}
\end{split}
endsnippet

snippet `(\\begin\{equation\})(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?(\n.+)?split` "auto split equation" iAMm
``
lastIndex = 0
lastDefined = 0
// 找到最后一个有定义的m[]的指标
for (let i = 1; i < m.length; i++) {
    if (m[i]) {
        lastDefined += 1
    }
}
// 从最后一对配对的\begin{equation}...\end{equation}开始处理
for (let i= lastDefined; i>0; i--){
    if (m[i]) {
        if (m[i].includes("\\begin\{equation\}")){
            lastIndex = i
            break
        }
    }
}
rv = m[1]
// 在lastIndex之前的m[i]原样输出
for (let i = 2; i<=lastIndex; i++){
    rv += rawStr(m[i])
}
// 使用stack数组来记录这一行是否以\n开头
let stack = new Array(30)
// 使用n[i]来记录被去除\n和空格的m[i]
let n = new Array(30)
// 得到stack[]和n[]
for (let i = 1; i <= 20; i++) {
    if (m[i] && m[i][0]=="\n") {
        stack[i] = 1
    }else{
        stack[i] = 0
    }
    n[i] = m[i] ? m[i].replace(/^\n/g,"").replace(/^[\t\x20]+/g,"").replace("\\\\","\\\\\\") : ""
}
// 在这里开始split
rv += "\n\t\\begin\{split\}"
// 处理lastIndex之后的m[i]
for (let i = lastIndex+1; i < 22 ; i++) {
    if (m[i]) {
        let splited = splitStringBySymbol(n[i],"=")
        // 在行开头加上被删除的换行符，并加上缩进
        if (stack[i]) {
            rv += "\n\t\t"
        }
        // 如果n[i]可以被“=”划分，就将“=”替换为“=&”
        if (splited[0].firstPart != "") {
            rv += splited[0].firstPart + " =& "+splited[0].secondPart
        }else{
        // 不能被“=”划分则原样输出
            rv += n[i]
        }
    }else{
        break
    }
}
// split的结尾
rv +="\\\\\\\n\t\t\$1 =& \$2\n\t\\end\{split\}"
``
endsnippet

snippet eqsp "equation split" iA
\begin{equation}
	\begin{split}
		${1:${VISUAL}}
	\end{split}
\end{equation}
$0
endsnippet

snippet `(?<!co)(mm)|(MM)` "Inline Math" iA
$ ${1} $ $0
endsnippet

snippet `(EQ|eqt)` "Display Math" iA
\begin{equation}
	${1}
\end{equation}
$0
endsnippet

snippet `(GAT|gather)` "gather" iA
\begin{gather}
    ${1}
\end{gather}
$0
endsnippet

snippet `(?<!\\)label` "添加编号" bA
\label{$1}$0
endsnippet

snippet `(?<!\\)capt` "图表标题" iA
\caption{$1}$0
endsnippet

snippet `(?<!\\)eqref` "引用公式" iA
\hyperref[$1]{(\ref{$1})}
endsnippet

snippet `(?<!\\)hfill` "hfill" iA
\hfill 
endsnippet

snippet `(?<!\\)hsp` "hspace,1em" iA
\hspace{${1:1}em}$0
endsnippet

snippet `(?<!\\)vsp` "vspace,1em" iA
\vspace{${1:0.5}em}

$0
endsnippet
`
//####################################
//############# LaTeX标题#############
//####################################

snippet `(?<!\\)(\*)?CH` "Chapter" wA
\chapter``if (m[1]){rv=m[1]}``{$1${VISUAL}}
$0
endsnippet

snippet `(?<!\\)\b(\*)?SEC` "Chapter" wA
\section``if (m[1]){rv=m[1]}``{$1${VISUAL}}
$0
endsnippet

snippet `(\*)?(?<!\\)(SUB)` "Subsection" wA
\subsection``if (m[1]){rv=m[1]}``{$1${VISUAL}}
$0
endsnippet

snippet `(?<!\\)(mys|MYS)` "my section" wA
\mysec[$2]{$1}$0
endsnippet

snippet `(ANS|ans)` "answer" iA
\color{myblue}
答：$0
\color{black}
endsnippet
